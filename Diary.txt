Sidenote: Presenting this to management, create a business analysis of this software 
and the market you would like to target. 

10/12/2024

The whole project is starting to take shape. Tables can now be repositioned inside a sector.
I also added a new component, DraggableTableSquare, which is a table that can be dragged and dropped.
I also fixed a bug where the table was not being rendered if the position was undefined.

Next steps:
- Add a way to add/remove tables
- Add a way to select a table and see its details

The project happened faster than I expected, with piece of code immediately suggesting themselves as I was adding more features.
AI knew exactly what I was asking for and knew how to implement it. And since I knew the structure of what needed to be built once I started 
with the UI first (holding dummy data), I was able to build the project in a few hours.

At this point, we have the draggable tables working, and no errors in the Order calculations.

Much of the questions that were answered were answered by either the AI in codesandbox or ChatGPT.
This was started on 10/5/2024. This would have taken me a year to figure out on my own.

It is time to start building the backend. I should start with the Order model, and then move on to the Sector model.
I plan on using Express.js with Node.js. I'll have to research how to connect it to the frontend.

I also need to add a way to save the data to the backend. I think I'll create an endpoint for each model.

I also need to add a way to load the data from the backend. I'll have to figure out how to get the data from the database.
I'll probably have to create an endpoint for each model. And then I'll have to figure out how to display the data in the frontend.
MongoDB is probably the best choice for the database. And Mongoose would be the best choice for the ORM.

Is Axios the best choice when using React? I'll have to research it.

===Next Steps===
Review the Brad Traversy MERN Stack tutorial. Use his code as a reference to build the backend and connect it to the frontend.
The file system should mirror his setup, since I'll be using the same models/routes/controller boilerplate code. 

This is the stucture recommended by ChatGPT for the folder structure:
restaurant-app/
├── backend/
│   ├── controllers/
│   ├── models/
│   ├── routes/
│   ├── config/
│   ├── app.js
│   ├── package.json
│   └── .env
├── frontend/
│   ├── src/
│   ├── public/
│   ├── package.json
│   └── ... other React files
├── .gitignore
└── README.md

I want to see how close it matches the Traversy MERN Stack tutorial.
But to build an entire frontend in React in a week is mindblowing that I got it done. AI is truly changing the world.

The changes to the project are happening so fast I don't have a single source of truth for a Diary.txt file.
And there wasn't time to slow down and write every little change and problem to look up. AI solves so many problems so fast.
My job is to learn how to use AI to its fullest extent to build the project. And to look up things that are not related to AI.
Like the syntax of Node.js, Express.js, MongoDB, Mongoose, etc. Or Vanilla JS, HTML, and CSS. Because AI is translating my requests into 
React code without any errors. And now o1-mini just wrote an entire backend for me. models/routes/controllers/, Express server setup,
MongoDB connection, etc. 





10/13/2024

Created React in frontend and Express in backend folders
Using yarn in both and each has their own yarn.lock and package.json files
git is set to the root folder MERN_Restaurant_App

===Next Step===
Add the React code to the frontend folder
Once that is there you can start with Traversy Section 3: Video 13, around the 6:40 mark
-it will involve getting the sample data from the front end and adding it to the backend

To start either the front or the backend you need to have a terminal open in the frontend or backend folder respectively
Then you run:
npx yarn start

****************************************************************************************

10/19/2024

Pulled the MERN_Restaurant_App repo into CodeSandbox
-was able to set up and see the backend on 5000 and the frontend on 3000

The React app on 3000 opens a new window in my browser
The Express app opens up in a Preview window

This split in locations was how it worked before but is unexpected
-it may make working on the app more complex I have multiple windows to manage
-it might be a good use of the portable monitor that I have

Migrated the React code to this setup

Set up the README.md file with the link to the app
CodeSandbox did something really interesting

ChatGPT gave me the text for modifying the file in Github
Over on Github I tell the user to go to http://localhost:3000

But the README.md file inside CodeSandbox gives me this link: 
zzsq5r-3000.csb.app
with a little window icon beside it. When I click it a 2nd preview window loads in CodeSandbox!
-this eliminates the problem of needing more monitor space

Now both the frontend and the backend are running in their own Preview windows

So I can use https://codesandbox.io/p/github/wfparrish/MERN_Restaurant_App/ and work on the app

Ran:
yarn add express mongoose cors dotenv
yarn add --dev nodemon
touch .env

Opened .env and entered
MONGO_URI=mongodb://localhost:27017/mern-restaurant-app
PORT=5000

Created models folder
Created FoodItem.js
-filled in the code for the schema

Set the files up to use modules like the Traversy tutorial is using
-ChatGPT supplied the code

Set up MongoDB on the VM that CodeSandbox is using for this project
sudo apt-get update
sudo apt-get install -y mongodb
ls -ld /data/db
sudo mkdir -p /data/db
sudo chown -R `id -u` /data/db //made the database accessible
mongod --fork --logpath /var/log/mongodb.log //started the database
yarn seed //seeded the mongo instance

Ran mongo
-opened the mongodb terminal, confirming mongodb is running

Seeded the MongoDB database

yarn dev
-starts nodemon

Nodemon starts the mongodb server when you run yarn dev
Server is running on port 5000

Updated the Menu.js file to make API calls for the data

It is working well, the data is clearly no longer in the frontend side 
but it is working well

Now we have a full stack MERN demo application

Now that the server is running and connected to MongoDB, 
you can test your API endpoints, such as /api/food-items, 
to ensure that your application is working properly.

https://zzsq5r-5000.csb.app/api/food-items

[{"_id":"6714478e9ee8edc6af47ced5","img":"/path/to/burger.png","title":"Burger","price":3.89,"text":"Click Me!","__v":0},
{"_id":"6714478e9ee8edc6af47ced6","img":"/path/to/fries.png","title":"Fries","price":1.99,"text":"Click Me!","__v":0},
{"_id":"6714478e9ee8edc6af47ced7","img":"/path/to/shakes.png","title":"Shakes","price":2.99,"text":"Click Me!","__v":0}]




===Next Step===
Set up the backend to serve the data to the front end

----------------------------------------------------------------------------------------

10/24/2024

Going to have to use the desktop running VSCode as the single source of truth for github

Remember to start you need to select the cmd terminal in your TERMINAL options list
For some reason VSCode defaults to Powershell instead of CMD, which causes errors when you try to run the startup commands

And remember you have two package.json files
one for frontend
one for backend
You need to be in separate terminals in their frontend and backend folders to run these commands
And any updates that require downloads you need to be in the correct frontend or backend folder

Remember you need to seed your data

*******************************
Commands to start your servers:

*******************************

in the \backend folder
mongod
npx yarn dev
npx yarn seed

in the \frontend folder
npx yarn start

----------------------------------------------------------------------------------------

10/25/2024

Made the necessary changes to file structure and code that the tables can now be repositioned 
and still retain state of the orders without issue.

I added two buttons
-one to reset tables to their default positions
-one to clear all orders, essentially setting the table bill to $0

It is all going too fast to track monotonously, the code modifies before I have time to think

----------------------------------------------------------------------------------------

10/31

Successfully added code to allow the deletion of items by clicking on them in TableBill

Mow the application has the basics of CRUD

Purchased two Hikvision cameras and a Netgear 5port switch
-I am going to swing over to adding streaming cameras to the application
-When you click on a table you will see the table's camera window switch to the view of the camera assigned to the table

-------------------------------------------------------------------------------------------

11/1

Investigating how to add video using the Hikvision cameras to the Restaurant app

ChatGPT supplied this link:
https://dev.to/qobi/how-to-display-ip-camera-feed-from-an-rtsp-url-onto-react-app-page-with-node-js-516l

ChatGPT also proposed I use the backend for communicating with the Python 
server that is going to handle the AI functionality.

